//
//  LookUpViewController.swift
//  UikitPlayground
//
//  Created by yongbeomkwak on 2023/06/10.
//

import UIKit

class LookUpViewController: BaseViewController,ViewControllerFromStoryBoard {

    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var thumbNailImageView: UIImageView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var developerNameLabel: UILabel!
    @IBOutlet weak var installButton: UIButton!
    @IBOutlet weak var shareButton: UIButton!
    
    @IBOutlet weak var topCollectionView: UICollectionView!
    
    @IBOutlet weak var newFunctionLabel: UILabel!
    @IBOutlet weak var bottomCollectionView: UICollectionView!
    
    var viewModel:LookupViewModel!
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureUI()
        
        bindCompletion()
        
        
 
       
       
    }
    
    public static func viewController(viewModel:LookupViewModel) -> LookUpViewController {
        
        let vc = LookUpViewController.viewController(storyBoardName: "Appstore", bundle: .main)
        
        vc.viewModel = viewModel
        
        return vc
    }
    

}


extension LookUpViewController {
    
    

    
    func configureUI(){
        
        
        self.thumbNailImageView.layer.cornerRadius = 12
        self.thumbNailImageView.clipsToBounds = true
        

        
        self.titleLabel.font = .systemFont(ofSize: 15, weight: .bold)
       
        
        self.developerNameLabel.font = .systemFont(ofSize: 12, weight: .light)
        self.developerNameLabel.textColor = .systemGray2
       
        
        
        self.installButton.setTitle("Î∞õÍ∏∞", for: .normal)
        self.installButton.tintColor = .white
        self.installButton.backgroundColor = .systemBlue
        self.installButton.layer.cornerRadius = 12.5
        self.installButton.clipsToBounds = true
        
        self.shareButton.tintColor = .systemBlue
        self.shareButton.setImage(UIImage(systemName: "square.and.arrow.up"), for: .normal)
        
        self.newFunctionLabel.lineBreakMode = .byCharWrapping
        /*
         Ïª®ÌÖåÏù¥ÎÑàÏóê ÎßûÏßÄ ÏïäÎäî Îã®ÎùΩÏùò Ï§Ñ Î∞îÍøà Î™®ÎìúÏûÖÎãàÎã§.
         üçé Î†àÏù¥Î∏îÏùò ÌÖçÏä§Ìä∏Î•º Ï§Ñ Î∞îÍøàÌïòÍ≥† ÏûêÎ•¥Îäî Í∏∞Ïà†Ïù¥Îã§.
         
         1. .byWordWrapping
        - Character WrapÍ≥º ÎπÑÏä∑ÌïòÏßÄÎßå, Í∞úÎ≥Ñ Î¨∏ÏûêÍ∞Ä ÏïÑÎãàÎùº Îã®Ïñ¥ Í∏∞Ï§ÄÏúºÎ°ú Ï§ÑÎ∞îÍøàÌï©ÎãàÎã§. Ï¶â, Îã®Ïñ¥ Ï§ëÍ∞ÑÏùÑ ÎÅäÏñ¥ Ï§ÑÎ∞îÍøàÌïòÏßÄ ÏïäÎäîÎã§Îäî ÎúªÏûÖÎãàÎã§. Ïù¥ ÎïåÎ¨∏Ïóê Îã®Ïñ¥ Ï†ÑÏ≤¥Í∞Ä Îì§Ïñ¥Í∞à Í≥µÍ∞ÑÏù¥ Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏúºÎ©¥ ÎÇ®ÏùÄ Í≥µÍ∞ÑÏù¥ ÏûàÎçîÎùºÎèÑ Îã§Ïùå ÎùºÏù∏ÏúºÎ°ú Ï§ÑÎ∞îÍøàÌïòÎäî ÌäπÏÑ±Ïù¥ ÏûàÏäµÎãàÎã§.
         
         2. .byCharWrapping
        - Í∞úÎ≥Ñ Î¨∏Ïûê Îã®ÏúÑÎ°ú Ï§ÑÎ∞îÍøàÌï©ÎãàÎã§. ÌïòÎÇòÏùò Îã®Ïñ¥Í∞Ä ÏôÑÏ†ÑÌûà ÎÅùÎÇòÏßÄ ÏïäÏïòÏñ¥ÎèÑ ÎùºÏù∏Ïùò ÎÅùÏóê ÎèÑÏ∞©ÌïòÎ©¥ Îã§Ïùå ÎùºÏù∏ÏúºÎ°ú Ï§ÑÏùÑ Î∞îÍæ∏Ïñ¥ ÎÇòÎ®∏ÏßÄ Î¨∏ÏûêÎ•º Í≥ÑÏÜç Ï∂úÎ†•Ìï©ÎãàÎã§. Î¨ºÎ°† Line ÏÜçÏÑ±ÏóêÏÑú ÏÑ§Ï†ïÎêú ÎùºÏù∏ ÏàòÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ ÎÇòÎ®∏ÏßÄ ÌÖçÏä§Ìä∏Îäî ÌëúÏãúÌïòÏßÄ ÏïäÏäµÎãàÎã§
         
         3. .byClipping
        - Ï§ÑÏù¥ ÌÖçÏä§Ìä∏ Ïª®ÌÖåÏù¥ÎÑàÏùò Í∞ÄÏû•ÏûêÎ¶¨Î•º ÏßÄÎÇò ÌôïÏû•ÎêòÏßÄ ÏïäÏùåÏùÑ ÎÇòÌÉÄÎÇ¥Îäî Í∞íÏù¥Îã§.
         
         4.  .byTruncatingHead
         - ÏΩòÌÖêÏ∏† Ï∂úÎ†•Ïóê ÌïÑÏöîÌïú ÎùºÏù∏ ÏàòÎ≥¥Îã§ Î†àÏù¥Î∏îÏóê ÏÑ§Ï†ïÎêú Line ÏÜçÏÑ±Ïù¥ Ï†ÅÏùÑ Í≤ΩÏö∞, ÎßàÏßÄÎßâ ÎùºÏù∏Ïùò Ï≤´ Î®∏Î¶¨ ÌÖçÏä§Ìä∏ ÏùºÎ∂ÄÎ•º ÎßêÏ§ÑÏûÑÌëúÎ°ú Ï≤òÎ¶¨Ìï©ÎãàÎã§.
         
         5. Truncate Middle
         
         - ÎßàÏßÄÎßâ ÎùºÏù∏Ïùò ÌÖçÏä§Ìä∏ Ï§ëÍ∞ÑÏùÑ ÎßêÏ§ÑÏûÑÌëúÎ°ú Ï≤òÎ¶¨ÌïòÍ≥† ÎùºÏù∏Ïùò ÏïûÍ≥º Îí§ ÌÖçÏä§Ìä∏Î•º Î≥¥Ï°¥ÌïòÎäî Î∞©ÏãùÏûÖÎãàÎã§.
         
            Ï¶â, ÏïûÎ∂ÄÎ∂ÑÏùÑ ÏûòÎùºÎÇ¥Í≥† ÌÖçÏä§Ìä∏Ïùò Îí∑Î∂ÄÎ∂ÑÏùÑ Î≥¥Ï°¥ÌïòÎäî Î∞©ÏãùÏúºÎ°ú ÏΩòÌÖêÏ∏†Î•º ÌëúÌòÑÌï©ÎãàÎã§.
         
         
         6. Truncate Tail

         - ÎßàÏßÄÎßâ ÎùºÏù∏Ïùò Îí∑Î∂ÄÎ∂ÑÏùÑ ÏûòÎùºÎÇ¥Ïñ¥ ÎßêÏ§ÑÏûÑÌëúÎ°ú Ï≤òÎ¶¨Ìï©ÎãàÎã§. (Í∞ÄÏû• ÏùµÏàôÌïú Ï≤òÎ¶¨ Î∞©Ïãù)
            
         */
        
    }
    
    func bindCompletion() {
        viewModel.fetchData { [weak self] result in

            guard let self else {return}
            guard let model = result.results.first else {return}
            
            DispatchQueue.main.async {
                self.titleLabel.text = model.trackName
                self.developerNameLabel.text = model.artistName
                self.newFunctionLabel.text = model.releaseNotes
                self.topCollectionView.dataSource = self
                self.bottomCollectionView.dataSource = self
                self.bottomCollectionView.delegate = self
                self.bottomCollectionView.reloadData()
            }
            
            
            
            
            ImageCacheManager.shared.loadImage(url: model.artworkUrl512) {[weak self] data in
                
                guard let self else {return}
                
                
                DispatchQueue.main.async {
                    self.thumbNailImageView.image = UIImage(data: data)
                }
                
                
            }
        }
        
    }
}


extension LookUpViewController:UICollectionViewDelegate,UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
    
        if collectionView == bottomCollectionView{
        
            
            
            guard let count = viewModel.dataSource?.results.first?.screenshotUrls.count else { return .zero }
            
            let width = (UIScreen.main.bounds.width + 50 ) / 2
            let height = width * 696 / 392
            
            
            DEBUG_LOG("LOG ")
            
            
            return CGSize(width: width, height: height) // Ïª¨Î†âÏÖò Î∑∞ ÏÖÄ ÌïòÎÇòÏùò ÌÅ¨Í∏∞(ÎÑàÎπÑ,ÎÜíÏù¥)
            
        }
        
        else {
            return CGSize.zero
        }
    }

//    public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
//
//        // Ïä§ÌÅ¨Î°§Ïù¥ ÎÅùÍπåÏßÄ ÎêòÏóàÏùÑ Îïå , collectinView ÏûêÏ≤¥ Ïù∏ÏÖã ÏÑ§Ï†ï
//        return UIEdgeInsets(top: 0, left: 30.0, bottom: 0, right: 30.0)
//    }

    public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0 //ÏÖÄ ÏÇ¨Ïù¥Í∞ÑÍ≤©
    }

    public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0
    }

    

}

extension LookUpViewController:UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        if collectionView == self.topCollectionView {
            return viewModel.ratingCase.count
        }
        else {
            
            guard let model = viewModel.dataSource?.results.first else { return 0 }
            
            
            return model.screenshotUrls.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        guard let model = viewModel.dataSource?.results.first else {
            return UICollectionViewCell()
        }
        
        if collectionView == self.topCollectionView {
            
            switch viewModel.ratingCase[indexPath.row] {
                
            case .starRating:
                guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "LookUpRatingCell", for: indexPath) as? LookUpRatingCell else {
                    return UICollectionViewCell()
                }
                
                cell.update(numberOfRating: model.userRatingCount, rating: model.averageUserRating)
                return cell
                
            case .age,.chart:
                let type = viewModel.ratingCase[indexPath.row]
                
                guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "LookUpTextCell", for: indexPath) as? LookUpTextCell else {
                    return UICollectionViewCell()
                }
                
                if type == .age {
                    cell.update(title: "Ïó∞Î†π", content: "4+", subTitle: "ÏÑ∏")
                }
                
                else {
                    cell.update(title: "Ï∞®Ìä∏", content: "#?", subTitle: "ÏùåÏïÖ")
                }
                
          
                return cell
                
            case  .dev:
                guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "LookUpDevCell", for: indexPath) as? LookUpDevCell else {
                    return UICollectionViewCell()
                }
                
                cell.update(developer: model.artistName)
                
                return cell
                
                
            case .lan :
                
                guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "LookUpNoLineTextCell", for: indexPath) as? LookUpNoLineTextCell else {
                    return UICollectionViewCell()
                }
                
              
                cell.update(title: "Ïñ∏Ïñ¥", content: model.languageCodesISO2A.first!, subTitle: "+ 1Í∞ú Ïñ∏Ïñ¥" )
                    return cell
            }
            
            
            
        }
        else {
           
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "LookUpScreenShotCollectionViewCell", for: indexPath) as? LookUpScreenShotCollectionViewCell else { return UICollectionViewCell()}
            
            guard let model = viewModel.dataSource?.results.first else { return UICollectionViewCell() }
            
            cell.update(model.screenshotUrls[indexPath.row])
            
            return cell
            
        }
        
    }
    
    
}
