//
//  EscapingViewController.swift
//  UikitPlayground
//
//  Created by yongbeomkwak on 2023/06/01.
//

import UIKit

/*

 üî• Escaping ÌÅ¥Î°úÏ†Ä
 
 Escaping ÌÅ¥Î°úÏ†ÄÎäî ÌÅ¥Î°úÏ†ÄÍ∞Ä Ìï®ÏàòÏùò Ïù∏ÏûêÎ°ú Ï†ÑÎã¨ÎêêÏùÑ Îïå, Ìï®ÏàòÏùò Ïã§ÌñâÏù¥ Ï¢ÖÎ£åÎêú ÌõÑ Ïã§ÌñâÎêòÎäî ÌÅ¥Î°úÏ†Ä ÏûÖÎãàÎã§.
 Non-Escaping ÌÅ¥Î°úÏ†ÄÎäî Ïù¥ÏôÄ Î∞òÎåÄÎ°ú Ìï®ÏàòÏùò Ïã§ÌñâÏù¥ Ï¢ÖÎ£åÎêòÍ∏∞ Ï†ÑÏóê Ïã§ÌñâÎêòÎäî ÌÅ¥Î°úÏ†Ä ÏûÖÎãàÎã§.
 
 Ïù¥Î†áÍ≤å escaping, non-escaping ÌÅ¥Î°úÏ†ÄÎ•º ÎÇòÎà†ÏÑú ÏÇ¨Ïö©ÌïòÎäî Ïù¥Ïú†Îäî Ïª¥ÌååÏùºÎü¨Ïùò ÌçºÌè¨Î®ºÏä§ÏôÄ ÏµúÏ†ÅÌôî ÎïåÎ¨∏ÏûÖÎãàÎã§.

 non-escaping ÌÅ¥Î°úÏ†ÄÎäî Ïª¥ÌååÏùºÎü¨Í∞Ä ÌÅ¥Î°úÏ†ÄÏùò Ïã§ÌñâÏù¥ Ïñ∏Ï†ú Ï¢ÖÎ£åÎêòÎäîÏßÄ ÏïåÍ∏∞ ÎïåÎ¨∏Ïóê,
 ÎïåÏóê Îî∞Îùº ÌÅ¥Î°úÏ†ÄÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî ÌäπÏ†ï Í∞ùÏ≤¥Ïóê ÎåÄÌïú retain, release Îì±Ïùò Ï≤òÎ¶¨Î•º ÏÉùÎûµÌï¥
 Í∞ùÏ≤¥Ïùò ÎùºÏù¥ÌîÑÏã∏Ïù¥ÌÅ¥(life-cycle)ÏùÑ Ìö®Ïú®Ï†ÅÏúºÎ°ú Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.

 Î∞òÎ©¥ esacping ÌÅ¥Î°úÏ†ÄÎäî Ìï®Ïàò Î∞ñÏóêÏÑú Ïã§ÌñâÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ÌÅ¥Î°úÏ†ÄÍ∞Ä Ìï®Ïàò Î∞ñÏóêÏÑúÎèÑ Ï†ÅÏ†àÌûà Ïã§ÌñâÎêòÎäî Í≤ÉÏùÑ Î≥¥Ïû•ÌïòÍ∏∞ ÏúÑÌï¥,
 ÌÅ¥Î°úÏ†ÄÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Í∞ùÏ≤¥Ïóê ÎåÄÌïú Ï∂îÍ∞ÄÏ†ÅÏù∏ Ï∞∏Ï°∞Ïã∏Ïù¥ÌÅ¥(reference cycles) Í¥ÄÎ¶¨ Îì±ÏùÑ Ìï¥Ï§òÏïº Ìï©ÎãàÎã§.
 Ïù¥ Î∂ÄÎ∂ÑÏù¥ Ïª¥ÌååÏùºÎü¨Ïùò ÌçºÌè¨Î®ºÏä§ÏôÄ ÏµúÏ†ÅÌôîÏóê ÏòÅÌñ•ÏùÑ ÎÅºÏπòÍ∏∞ ÎïåÎ¨∏Ïóê SwiftÏóêÏÑúÎäî ÌïÑÏöîÌï† ÎïåÎßå escaping ÌÅ¥Î°úÏ†ÄÎ•º ÏÇ¨Ïö©ÌïòÎèÑÎ°ù Íµ¨Î∂ÑÌï¥ ÎëêÏóàÏäµÎãàÎã§.
 
 
*/


class EscapingViewController: UIViewController,ViewControllerFromStoryBoard {
    @IBOutlet weak var label1: UILabel!
    @IBOutlet weak var label2: UILabel!
    @IBOutlet weak var label3: UILabel!
    
    var vm = EscapingViewModel()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        nonEscapingClosure {
            DEBUG_LOG("1Ô∏è‚É£ Run nonEscape Deliver Closure")
            self.label1.text = "Run nonEscape Deliver Closure"
        }
        DEBUG_LOG("4Ô∏è‚É£ Terminate nonEscape Deliver Closure")
        
        
        vm.escapeClosure {
            DEBUG_LOG("1Ô∏è‚É£ Run Escape Deliver Closure")
            self.label2.text = "Run Escape Deliver Closure"
        }
        
        DEBUG_LOG("4Ô∏è‚É£ Terminate Escape Deliver Closure")
        
        vm.optionalClosure {
            DEBUG_LOG("1Ô∏è‚É£ Run Optional Deliver Closure")
            self.label3.text = "Run Optional Deliver Closure"
        }
        
        DEBUG_LOG("4Ô∏è‚É£ Terminate Optional Deliver Closure")
        
        
    }
    
    public static func viewController() -> EscapingViewController {
        
        let vc = EscapingViewController.viewController(storyBoardName: "Main", bundle: .main)
        
        return vc
    }
    


}

extension EscapingViewController {
    
    
    func nonEscapingClosure(closure: () -> Void) {
        /*
         ÌÅ¥Î°úÏ†ÄÍ∞Ä runClosure() Ìï®ÏàòÏùò closure Ïù∏ÏûêÎ°ú Ï†ÑÎã¨Îê®
         Ìï®Ïàò ÏïàÏóêÏÑú closure() Í∞Ä Ïã§ÌñâÎê®
         runClosure() Ìï®ÏàòÍ∞Ä Í∞íÏùÑ Î∞òÌôòÌïòÍ≥† Ï¢ÖÎ£åÎê®
         Ïù¥Î†áÍ≤å ÌÅ¥Î°úÏ†ÄÍ∞Ä Ìï®ÏàòÍ∞Ä Ï¢ÖÎ£åÎêòÍ∏∞ Ï†ÑÏóê Ïã§ÌñâÎêòÍ∏∞ ÎïåÎ¨∏Ïóê closureÎäî Non-Escaping ÌÅ¥Î°úÏ†Ä ÏûÖÎãàÎã§.
         */
        DEBUG_LOG("2Ô∏è‚É£ Run nonEscape")
        closure()
        DEBUG_LOG("3Ô∏è‚É£ Exit nonEscape")
    }
    

    
}

class EscapingViewModel {
    /*
     ÌÅ¥Î°úÏ†ÄÍ∞Ä escapeClosure() Ìï®ÏàòÏùò completion Ïù∏ÏûêÎ°ú Ï†ÑÎã¨Îê®
     
     ÌÅ¥Î°úÏ†Ä completionÏù¥ completionHandler Î≥ÄÏàòÏóê Ï†ÄÏû•Îê®
     
     fetchData() Ìï®ÏàòÍ∞Ä Í∞íÏùÑ Î∞òÌôòÌïòÍ≥† Ï¢ÖÎ£åÎê®
     
     ÌÅ¥Î°úÏ†Ä completionÏùÄ ÏïÑÏßÅ Ïã§ÌñâÎêòÏßÄ ÏïäÏùå
     
     completionÏùÄ Ìï®ÏàòÏùò Ïã§ÌñâÏù¥ Ï¢ÖÎ£åÎêòÍ∏∞ Ï†ÑÏóê Ïã§ÌñâÎêòÏßÄ ÏïäÍ∏∞ ÎïåÎ¨∏Ïóê escaping ÌÅ¥Î°úÏ†Ä,
     Îã§ÏãúÎßêÌï¥ Ìï®Ïàò Î∞ñ(escaping)ÏóêÏÑú Ïã§ÌñâÎêòÎäî ÌÅ¥Î°úÏ†Ä ÏûÖÎãàÎã§.
     
     */
    var completionHandler: (()-> Void)? = nil
    
    func escapeClosure(completion: @escaping () ->Void){
        DispatchQueue.main.asyncAfter(deadline: .now()+3, execute: {
            DEBUG_LOG("2Ô∏è‚É£ Run Escape")
            completion()
            DEBUG_LOG("3Ô∏è‚É£ Exit Escape")
        })
    }
    /*
     ÌååÎùºÎØ∏ÌÑ∞ ÌÉÄÏûÖÏù¥ Optional ClosureÏùº Í≤ΩÏö∞,  ÎçîÏù¥ÏÉÅ Closure ÌååÎùºÎØ∏ÌÑ∞ ÌÉÄÏûÖÏù¥ ÏïÑÎãå Optional ÌååÎùºÎØ∏ÌÑ∞ ÌÉÄÏûÖÏù¥Îã§.
     
     Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÌååÎùºÎØ∏ÌÑ∞Î°ú Î∞õÎäî "ÌÅ¥Î°úÏ†Ä"Îäî Ìï®Ïàò ÌùêÎ¶ÑÏùÑ ÌÉàÏ∂úÌïòÏßÄ Î™ªÌïúÎã§

      

     ÏúÑ Ï°∞Í±¥ÏóêÏÑú "ÌÅ¥Î°úÏ†Ä"Ï°∞Í±¥Ïù¥ Î≤óÏñ¥ÎÇòÎ≤ÑÎ¶∞ Í≤ÉÏûÑ!!!!

     Í∑ºÎç∞ Ïù¥Î†áÍ≤å Ìï®Ïàò ÌååÎùºÎØ∏ÌÑ∞Ïùò ÌÅ¥Î°úÏ†ÄÍ∞Ä Optional TypeÏù∏ Í≤ΩÏö∞Ïóî

     ÏûêÎèôÏúºÎ°ú escapingÏúºÎ°ú ÎèôÏûëÌïòÎÇòÎ¥Ñ!! Îî∞ÎùºÏÑú @escapingÏùÑ ÏßÄÏö∞ÎùºÎäî ÎìØ..?
     
     */
    
    func optionalClosure(completion:(() -> ())?) {
        DispatchQueue.main.asyncAfter(deadline: .now()+3, execute: {
            DEBUG_LOG("2Ô∏è‚É£ Run Optional")
            completion?()
            DEBUG_LOG("3Ô∏è‚É£ Exit Optional")
        })
    }
    
}

/* Í≤∞Í≥º

 Í∏∞Î≥∏ ÌÅ¥Î°úÏ†Ä

 [EscapingViewController.swift] nonEscapingClosure(86): 2Ô∏è‚É£ Run nonEscape
 [EscapingViewController.swift] viewDidLoad(42): 1Ô∏è‚É£ Run nonEscape Deliver Closure
 [EscapingViewController.swift] nonEscapingClosure(88): 3Ô∏è‚É£ Exit nonEscape
 [EscapingViewController.swift] viewDidLoad(45): 4Ô∏è‚É£ Terminate nonEscape Deliver Closure
 
 ÌÉàÏ∂ú ÌÅ¥Î°úÏ†Ä
 
 [EscapingViewController.swift] viewDidLoad(53): 4Ô∏è‚É£ Terminate Escape Deliver Closure [ÌÉàÏ∂ú ÌÅ¥Î°úÏ†Ä ÏôÑÏ†Ñ Ï¢ÖÎ£å]
 [EscapingViewController.swift] viewDidLoad(60): 4Ô∏è‚É£ Terminate Optional Deliver Closure[ÏòµÏÖîÎÑê ÌÅ¥Î°úÏ†Ä ÏôÑÏ†Ñ Ï¢ÖÎ£å]
 [EscapingViewController.swift] escapeClosure(113): 2Ô∏è‚É£ Run Escape
 [EscapingViewController.swift] viewDidLoad(49): 1Ô∏è‚É£ Run Escape Deliver Closure
 [EscapingViewController.swift] escapeClosure(115): 3Ô∏è‚É£ Exit Escape
 [EscapingViewController.swift] optionalClosure(135): 2Ô∏è‚É£ Run Optional
 [EscapingViewController.swift] viewDidLoad(56): 1Ô∏è‚É£ Run Optional Deliver Closure
 [EscapingViewController.swift] optionalClosure(137): 3Ô∏è‚É£ Exit Optional
 
 */
